openapi: 3.0.0
info:
  title: User API
  description: 사용자 정보 관리 API를 정의하는 문서입니다.
  version: 0.0.1
servers:
  - url: https://api.locat.kr
    description: Production
paths:
  /v1/users:
    get:
      summary: Retrieve a list of users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            format: int32
            default: 1
          description: Page number for pagination.
        - in: query
          name: size
          schema:
            type: integer
            format: int32
            default: 20
          description: Number of users per page.
        - in: query
          name: sort
          schema:
            type: string
            default: "id,desc"
          description: Sort order for users
        - in: query
          name: email
          schema:
            type: string
            format: email
          description: Filter users by email.
        - in: query
          name: status
          schema:
            type: string
            enum:
              - ACTIVE
              - INACTIVE
              - BANNED
          description: Filter users by status.
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
    post:
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        409:
          description: "Conflict. A user with the same email already exists."
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
  /v1/users/{id}:
    get:
      summary: Retrieve a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: A user object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
      security:
        - bearerAuth: [ ]
    patch:
      summary: Update a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
      security:
        - bearerAuth: [ ]
    delete:
      summary: Delete a user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: User deleted successfully
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
      security:
        - bearerAuth: [ ]
  /v1/users/{id}/settings:
    get:
      summary: Retrieve settings for a specific user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User settings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSetting'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
      security:
        - bearerAuth: [ ]
  /v1/users/{id}/terms:
    get:
      summary: Retrieve terms agreements for a specific user
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: User terms agreements
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserTermsAgreement'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
      security:
        - bearerAuth: [ ]
  /v1/user-withdrawal-logs:
    get:
      summary: Retrieve a list of user withdrawal logs
      responses:
        200:
          description: A list of user withdrawal logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserWithdrawalLog'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
      security:
        - bearerAuth: [ ]
    post:
      summary: Create a new user withdrawal log
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserWithdrawalLog'
      responses:
        201:
          description: User withdrawal log created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithdrawalLog'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"

  /v1/user-withdrawal-logs/{id}:
    get:
      summary: Retrieve a user withdrawal log by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: A user withdrawal log object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithdrawalLog'
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        401:
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
      security:
        - bearerAuth: [ ]
    delete:
      summary: Delete a user withdrawal log by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        204:
          description: User withdrawal log deleted successfully
        400:
          description: "Bad request"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        404:
          description: "Not found"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "schemas.yaml#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        oauthId:
          type: string
        email:
          type: string
          format: email
        nickname:
          type: string
        profileImage:
          type: string
        userType:
          type: string
          enum:
            - USER
            - ADMIN
        statusType:
          type: string
          enum:
            - ACTIVE
            - INACTIVE
            - BANNED
      required:
        - ouathId
        - nickname
        - email
    UserSetting:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        appSetting:
          type: object
          properties:
            id:
              type: integer
        value:
          type: string
    UserTermsAgreement:
      type: object
      properties:
        id:
          type: integer
        user:
          $ref: '#/components/schemas/User'
        terms:
          type: object
          properties:
            id:
              type: integer
    UserWithdrawalLog:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        reason:
          type: string
